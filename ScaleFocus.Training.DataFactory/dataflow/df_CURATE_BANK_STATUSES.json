{
	"name": "df_CURATE_BANK_STATUSES",
	"properties": {
		"folder": {
			"name": "curation"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_ingestion_bankStatuses",
						"type": "DatasetReference"
					},
					"name": "IngBankStatuses"
				},
				{
					"dataset": {
						"referenceName": "ds_curation_bankStatuses",
						"type": "DatasetReference"
					},
					"name": "CurBankStatuses"
				},
				{
					"dataset": {
						"referenceName": "ds_ingestion_bankStatuses",
						"type": "DatasetReference"
					},
					"name": "IngBankStatuses2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_curation_bankStatuses",
						"type": "DatasetReference"
					},
					"name": "InsertNewBankStatuses"
				},
				{
					"dataset": {
						"referenceName": "ds_curation_bankStatuses",
						"type": "DatasetReference"
					},
					"name": "UpdateBankStatuses"
				}
			],
			"transformations": [
				{
					"name": "JoinIngestionAndCuration"
				},
				{
					"name": "FilterOnlyNewBankStatuses"
				},
				{
					"name": "JoinIngestionAndCuration2"
				},
				{
					"name": "FilterOnlyRecordToUpdate"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IngBankStatuses",
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CurBankStatuses",
				"source(output(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IngBankStatuses2",
				"IngBankStatuses, CurBankStatuses join(IngBankStatuses@BankStatusCode == CurBankStatuses@BankStatusCode,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> JoinIngestionAndCuration",
				"JoinIngestionAndCuration filter(isNull(CurBankStatuses@BankStatusCode)) ~> FilterOnlyNewBankStatuses",
				"IngBankStatuses2, CurBankStatuses join(IngBankStatuses2@BankStatusCode == CurBankStatuses@BankStatusCode,",
				"     joinType:'left',",
				"     broadcast: 'auto')~> JoinIngestionAndCuration2",
				"JoinIngestionAndCuration2 filter(isNull(CurBankStatuses@BankStatusName)) ~> FilterOnlyRecordToUpdate",
				"FilterOnlyRecordToUpdate alterRow(updateIf(true())) ~> AlterRow1",
				"FilterOnlyNewBankStatuses sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BankStatusCode = IngBankStatuses@BankStatusCode,",
				"          BankStatusName = IngBankStatuses@BankStatusName",
				"     )) ~> InsertNewBankStatuses",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BankStatusId as integer,",
				"          BankStatusCode as string,",
				"          BankStatusName as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['BankStatusCode'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BankStatusCode = IngBankStatuses2@BankStatusCode,",
				"          BankStatusName = IngBankStatuses2@BankStatusName",
				"     )) ~> UpdateBankStatuses"
			]
		}
	}
}